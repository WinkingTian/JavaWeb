<?xml version="1.0" encoding="UTF-8"?>
<!-- 不指定xsd版本号则相当于使用最新版本 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:websocket="http://www.springframework.org/schema/websocket"
	   xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		                   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		                   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		                   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		                   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		                   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		                   http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
		                   http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">
    	
	<!-- 当有项目引用时（即一个项目分为两个项目，一个引用另一个项目）需要添加下面一句：
	<context:component-scan base-package="com.javaweb" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
	</context:component-scan>
   	<mvc:annotation-driven/>
   	<mvc:default-servlet-handler/>
	-->
	
   	<!-- 配置JDBC数据源,采用阿里巴巴druid -->
   	<import resource="spring-dataSource.xml"/>
	
	<!-- 引入JDBC配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 到classpath下寻找配置文件,用eclipse开发的话,在工程目录下有个.classpath文件 -->
				<!-- 找output那段,可以看到它是去target/classes下去找 -->
				<value>classpath:config/props/jdbc.properties</value>
				<value>classpath:config/props/mongodb.properties</value>
				<value>classpath:config/props/redis.properties</value>
			</list>
		</property>
	</bean>
    
   	<!-- 配置事务管理器,这里没有采用tx切面形式统一管理,而是由各代码层面具体控制,提高灵活自由度 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="multipleDataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!--  
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.javaweb.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>
	-->
	
	<!-- mongodb start -->
	<!-- 暂时先不用mongodb,要用解注即可  
	<mongo:mongo-client id="mongo" replica-set="${mongo.hostport}">
		<mongo:client-options connect-timeout="${mongo.connectTimeout}"
			connections-per-host="${mongo.connectionPerHost}" max-wait-time="${mongo.maxWaitTime}"
			socket-keep-alive="${mongo.socketKeepAlive}" socket-timeout="${mongo.socketTimeout}" />
	</mongo:mongo-client>
	<mongo:db-factory dbname="${mongo.dbname}" mongo-ref="mongo"/>
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg ref="mongo" />
		<constructor-arg name="databaseName" value="${mongo.dbname}" />
	</bean>
	-->
	<!-- mongodb end -->
	
	<!-- redis start -->
	<!-- 原生方式 
	Jedis jredis = new Jedis("61.155.210.202",6379);
	-->
	<!-- 暂时先不用redis,要用解注即可
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
	    <property name="minIdle" value="${redis.minIdle}" />  
	    <property name="maxIdle" value="${redis.maxIdle}" />    
	    <property name="maxTotal" value="${redis.maxActive}" />    
	    <property name="maxWaitMillis" value="${redis.maxWait}" />    
	    <property name="testOnBorrow" value="${redis.testOnBorrow}" />    
    	</bean>    
	<bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
	    <property name="hostName" value="${redis.host}" />  
	    <property name="port" value="${redis.port}" />  
	    <property name="password" value="${redis.password}" />  
	    <property name="usePool" value="true" />  
	    <property name="poolConfig" ref="poolConfig" />  
	</bean> 
    	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
    	    <property name="connectionFactory" ref="jedisConnFactory" />  
    	    <property name="keySerializer">  
        	<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
    	    </property>     
    	    <property name="valueSerializer">  
        	<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
    	    </property>  
    	    <property name="hashKeySerializer">    
       		<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>    
    	    </property>  
    	    <property name="hashValueSerializer">  
       		<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>    
    	    </property>  
        </bean>
    -->
    <!-- java代码中的使用
    @Autowired 
    public RedisTemplate<Object,Object> redisTemplate; 
	
    @Resource(name="redisTemplate")
    public ValueOperations<Object,Object> valueOperations;
    -->
    <!-- redis end -->  
    
    <!-- MemCached start -->
    <!--
    <bean id="memCachedPool" class="com.whalin.MemCached.SockIOPool" factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
    	<constructor-arg>  
        	<value>memCachedPool</value>  
    	</constructor-arg>
    	<property name="servers">  
	        <list>  
	            <value>192.168.1.7:11211</value>  
	        </list>  
    	</property>  
    	<property name="initConn">  
            <value>20</value>  
        </property>  
        <property name="minConn">  
            <value>10</value>  
        </property>  
        <property name="maxConn">  
            <value>50</value>  
        </property>  
        <property name="maintSleep">  
            <value>3000</value>  
        </property>  
        <property name="nagle">  
            <value>false</value>  
        </property>  
        <property name="socketTO">  
            <value>3000</value>  
        </property>  
	</bean>  
    <bean id="memCachedClient" class="com.whalin.MemCached.MemCachedClient">  
	<constructor-arg>  
            <value>memCachedPool</value>  
	</constructor-arg>  
    </bean>
    -->
    <!-- MemCached end -->
    
    <!-- jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="multipleDataSource"></property>
    </bean>
	
	<!-- Hibernate Session Factory -->
	<!--  
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
			</props>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>com.javaweb.web.domain.User</value>
			</list>
		</property>
	</bean>
	-->
	
	<!-- mybatis文件配置,扫描所有mapper文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="multipleDataSource"/>
    	<property name="mapperLocations" value="classpath:mybatis/*/*.xml"/>
    </bean>
    <!-- spring与mybatis整合配置,扫描所有dao,接口代理,不用接口代理方式(无实现类)就注释掉 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="basePackage" value="com.javaweb.**.dao"/>
    	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    
    <!-- 缓存管理器,使用Ehcache实现 --> 
	<!--
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
    	<property name="cacheManagerConfigFile" value="classpath:config/unused/ehcache.xml"/>  
	</bean> 
	-->
    
    <!-- shiro start -->
    <!-- shiro的session同一时间只能一个人登录 
    1、spring-shiro.xml
	<bean id="userRealm" class="com.gloudtek.shiro.UserRealm"/>
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO"></bean>  
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">    
		<constructor-arg name="name" value="SHRIOSESSIONID"/>    
	</bean>
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">  
		<property name="sessionDAO" ref="sessionDAO"></property>  
	</bean> 
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
		<property name="realm" ref="userRealm"/>
	        <property name="sessionManager" ref="sessionManager"></property>  
	</bean>
	2、UserReam的protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
	@Autowired  
	private SessionDAO sessionDAO;
	Collection<Session> sessions = sessionDAO.getActiveSessions();  
	for(Session session:sessions){
	        SimplePrincipalCollection spc = (SimplePrincipalCollection)session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY);
	        	if(spc!=null){
	        		SysUserEntity sue = (SysUserEntity)spc.getPrimaryPrincipal();
	        		if(sue!=null){
	                	if(username.equals(sue.getAccount())){
	                		session.setTimeout(0);
	                	}
	                }
	        }
	}
    -->
    
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="ShiroRealm" />
	</bean>
		
	<!-- 項目自定义的Realm -->
	<bean id="ShiroRealm" class="com.javaweb.interceptor.shiro.ShiroRealm" ></bean>
		
	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- <property name="loginUrl" value="/index.html" /> --><!-- 没有登录跳转的地址 -->
		<!-- <property name="successUrl" value="/web/main/mainIndex" /> --><!-- 登录成功后跳转的地址 -->
		<!-- <property name="unauthorizedUrl" value="/noauthority.html" /> --><!-- 无权限跳转的地址 -->
		<!--  
		这里我不配置了,交由代码或spring框架处理
		<property name="filterChainDefinitions">
			<value>
				/plugins/**                 = anon
				/resources/**               = anon
	           	/web/login/**               = anon
	           	/**							= authc
			</value>
		</property>
		-->
	</bean>
	<!-- shiro end -->
	
	<!-- 有时候我们需要在非标注为@Controller或@RestController的类中调用service或dao来与数据库交互处理，那么可以这么处理 start -->
	<!-- 注入ApplicationContext -->
	<!-- <bean id="SpringApplicationContext" class="com.javaweb.filter.ApplicationContextHelper"></bean> -->
	<!--
		public class ApplicationContextHelper implements ApplicationContextAware { 
    			private static ApplicationContext ac;    
    			public void setApplicationContext( ApplicationContext applicationContext ) throws BeansException {    
    				ac = applicationContext;    
    			}  
			public static ApplicationContext getApplicationContext(){  
				return ac;  
			}  
			public static Object getBean(String beanName) {    
				return ac.getBean(beanName);    
			}  
		} 
	-->
	<!--
		UserService userService = (UserService) ApplicationContextHelper.getBean("userServiceImpl");  
		Map<String, Object> map = new HashMap<>();
		map.put("pernr", userId);
		UserInfo userInfo = userService.getUserInfo(map);
	-->
	<!-- 有时候我们需要在非标注为@Controller或@RestController的类中调用service或dao来与数据库交互处理，那么可以这么处理 end -->
	
</beans>
