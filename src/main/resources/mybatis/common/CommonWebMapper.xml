<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.javaweb.web.common.dao.CommonWebDao">

	<!-- 在mybatis中#{}一般都是带上引号的字符串,${}一般都是不带引号直接使用的;而在jsp中${}表示立即计算；#{}表示延迟计算 -->

	<select id="totalCount" parameterType="java.util.HashMap" resultType="java.lang.Long">
		select count(1) from ${table} where delflag = 0
	</select>
	
	<select id="descTable" parameterType="java.lang.String" resultType="com.javaweb.view.common.TableStructureVO">
		<!-- 单参数推荐这么写，当然#{myValue}这样也可以，但是在有些版本下可能会报错 -->
		desc ${_parameter}
	</select>
	
	<select id="showTables" resultType="java.lang.String">
		show TABLES
	</select>
	
	<!-- mybatis分页机制写法
	<resultMap type="com.xxx.xxx.XVO" id="a">  
    		<result column="id" jdbcType="INTEGER" javaType="Integer" /> 
    		<result column="menu_icon" jdbcType="VARCHAR" javaType="String" />  
  	</resultMap>  

 	<resultMap type="Integer" id="b">   
    		<result column="total" property="total" jdbcType="INTEGER" javaType="Integer"/>  
  	</resultMap> 
	
	<select id="x" resultMap="a,b">
		SELECT SQL_CALC_FOUND_ROWS id,menu_icon from c_menu WHERE menu_icon='项目地图' LIMIT 0,2;
       		SELECT FOUND_ROWS() as total;
	</select>
	public List<List<?>> x();
	-->
	
	<!-- 存储过程示例 
	CREATE PROCEDURE test(IN modulename VARCHAR(22))  
	BEGIN
	SELECT * from `user`;
	END
	-->
	<!-- mybatis接口写为 
	public List<User> getAll(Map<String,String> map);
	-->
	<!-- mybatis的XML写为  
	<select id="getAll" parameterType="java.util.Map" resultType="com.javaweb.entity.rbac.User">
		CALL test(#{modulename});  
	</select>
	-->
	
	<!-- JdbcTemplate存储过程示例
	//调用存储过程(详细参考:http://www.open-open.com/lib/view/open1392606683850.html)
	jdbcTemplate.execute("SET @@SESSION.max_sp_recursion_depth=10");
	    List resultList = (List) jdbcTemplate.execute(   
	    	new CallableStatementCreator() {   
		        public CallableStatement createCallableStatement(Connection con) throws SQLException {   
		           String storedProc = "{call p(?)}";   
		           CallableStatement cs = con.prepareCall(storedProc);   
		           cs.setString(1, "1");
		           return cs;
		        }   
		     }, new CallableStatementCallback() {   
		        public Object doInCallableStatement(CallableStatement cs) throws SQLException,DataAccessException {   
		           List resultsMap = new ArrayList();   
		           cs.execute(); 
		           while(true){
		        	   if(cs.getMoreResults()){
		        		   ResultSet rs = cs.getResultSet();
				           while (rs.next()) {
				              Map rowMap = new HashMap();   
				              rowMap.put("id", rs.getString("id"));   
				              rowMap.put("name", rs.getString("name")); 
				              rowMap.put("pid", rs.getString("pid")); 
				              resultsMap.add(rowMap);   
				           }   
				           rs.close();   
		        	   }else{
		        		   break;
		        	   }
		           }
		           return resultsMap;   
		     }
		});
	-->
	
	<!-- 执行任意单条SQL语句的增删改查
	1.dao接口:
	List<Map<String,Object>> sqlSelect(String sqlSelect);
	Integer sqlUpdate(String sqlUpdate);
	Integer sqlInsert(String sqlInsert);
	Integer sqlDelete(String sqlDelete);
        2.dao.xml
        <mapper namespace="com.gloudtek.dao.SqlDao">
		<select id="sqlSelect" parameterType="String" resultType="java.util.LinkedHashMap"> 
			${value}
		</select>
		<update id="sqlUpdate" parameterType="String">
			${value}
		</update>
		<insert id="sqlInsert" parameterType="String">
			${value}
		</insert>
		<delete id="sqlDelete" parameterType="String">
			${value}
		</delete>
	</mapper>
	3.简单测试
	List<Map<String,Object>> list = sqlDao.sqlSelect("select id,productor,equip_type as equipType,equip_no as equipNo,equipment_range as equipmentRange,"+
		                                         "equipment_value as equipmentValue,accuracy_level as accuracyLevel,equipment_name as equipmentName,"+
	                                                 "check_date as checkDate,dead_date as deadDate from equip_info");
	EquipDetailBean[] result = (EquipDetailBean[])JSONArray.toArray(JSONArray.fromObject(list),EquipDetailBean.class);
	for (int i = 0; i < result.length; i++) {
		EquipDetailBean equipDetailBean = result[i];
		System.out.println(equipDetailBean.getId()+","+equipDetailBean.getDeadDate());
	}
	int ret = sqlDao.sqlInsert("insert into app_version(id,type,version,url,create_by,create_time,update_by,update_time,isdelete )"+
				   "values(uuid(),1,'1.12','/a/q/c',null,null,null,null,0)");
	System.out.println(ret);
	-->
	
</mapper>
